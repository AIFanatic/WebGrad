import { GPT2Demo } from ".";
import { Device, Random, Tensor } from "../../../../src";
import { assert, equal, TensorFactory } from "../../../TestUtils";
import { TestRunner } from "../../../run-web";

interface SplitResult {
    CPU: Tensor | null,
    WEBGL: Tensor | null
};
let splitResult: SplitResult = {
    CPU: null,
    WEBGL: null
}

function equalArrays(first: number[], second: number[], EPS = 1e-6): boolean {
    if (first.length != second.length) return false;
    for (let i = 0; i < first.length; i++) {
        // if (first[i] !== second[i]) return false;
        if (Math.abs(first[i] - second[i]) > EPS) return false;
    }
    return true;
}

export function NetworkGPT2(device: Device) {
    
    TestRunner.describe("GPT2 test", async () => {
        // if (device === Device.CPU) return;

        Random.SetRandomSeed(1337);
        
        const gpt2Demo = new GPT2Demo(device);


        gpt2Demo.run().then(generated => {
            console.log(`generated ${generated}`);
        }).catch(error => {
            return;
            const result: Tensor[] = error.foo;
            splitResult[Device[device]] = result;
            
            if (device === Device.WEBGL) {
                console.log("Got it bro", splitResult)

                const cpuTensor = splitResult.CPU;
                const webglTensor = splitResult.WEBGL;
                if (cpuTensor === null || webglTensor === null) return;

                const cpuData = cpuTensor.data.getData().flat(Infinity);
                const webglData = webglTensor.data.getData().flat(Infinity);

                console.log(cpuData.length, webglData.length);
                console.log(`${cpuTensor.sum()} ${webglTensor.sum()}`);
                // console.log(cpuData, webglData);

                // cpuData[200] += 0.1;
                const eq = equalArrays(cpuData, webglData, 1e-5);
                console.log("Equal", eq);

                assert(equal(cpuData, webglData));

                // const n_embd = 48;
                // let [cpuQ, cpuK, cpuV] = cpuTensor.split(n_embd, 2);
                // let [webglQ, webglK, webglV] = webglTensor.split(n_embd, 2);

                // console.log(cpuQ);
                // console.log(webglQ);
                // assert(equal(cpuQ, webglQ));
                // assert(equal(cpuK, webglK));
                // assert(equal(cpuV, webglV));
                
                // console.log(`cpuQ ${cpuQ.mean()} ${cpuQ.device} ${cpuQ.shape} ${cpuQ.strides}`);
                // console.log(`webglQ ${webglQ.mean()} ${webglQ.device} ${webglQ.shape} ${webglQ.strides}`);
                // // console.log(cpuQ.data.getData().flat(Infinity), webglQ.data.getData().flat(Infinity));

                // throw Error("HERE")
            }
        })

        // const generated = await gpt2Demo.run();

        // console.log(`generated ${generated}`);
    
        // assert(equal(generated, TensorFactory({data: [27,1,19,53,42,6,1,27,1,19,53,42,2,0,0,31,47,58,1,40,43,1,62], grad: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]})));
    });

    // TestRunner.describe("GPT2 test", async () => {
    //     Random.SetRandomSeed(1337);
        
    //     const gpt2Demo = new GPT2Demo(device);
    //     const generated = await gpt2Demo.run();

    //     // console.log(`generated ${generated}`);
    
    //     assert(equal(generated, TensorFactory({data: [27,1,19,53,42,6,1,27,1,19,53,42,2,0,0,31,47,58,1,40,43,1,61], grad: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]})));
    // });
};